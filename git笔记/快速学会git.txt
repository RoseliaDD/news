快速学会git笔记汇总：

一、git的操作
1、安装git
	安装完成后，还需要最后一步设置，在命令行输入：

	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
	因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。

	注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。 

2、创建版本库
	pwd命令用于显示当前目录。在我的Mac上，这个仓库位于/Users/michael/learngit。

	如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。

	第二步，通过git init命令把这个目录变成Git可以管理的仓库：

	$ git init

	瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。

3、提交代码
	把一个文件放到Git仓库只需要两步。

	第一步，用命令git add告诉Git，把文件添加到仓库：

	$ git add readme.txt
	执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。

	第二步，用命令git commit告诉Git，把文件提交到仓库：

	$ git commit -m "wrote a readme file"
	[master (root-commit) eaadf4e] wrote a readme file
	 1 file changed, 2 insertions(+)
	 create mode 100644 readme.txt
	简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。

<<<<<<< HEAD
4、代码前进或回退
（1）代码提交
	$ git status

	git status命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，readme.txt被修改过了，但还没有准备提交的修改。

	虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看：

	$ git diff readme.txt 

（2）版本回退：
	版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：
	$ git log
	如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
	$ git log --pretty=oneline

Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	$ git reset --hard HEAD^
	$ cat readme.txt
	$ git log

	最新的那个版本append GPL已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？
	办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是1094adb...，于是就可以指定回到未来的某个版本：

	$ git reset --hard 1094a
	$ cat readme.txt

	在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：
	$ git reflog

（3）工作区和暂存区
	版本库（Repository）
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：

	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

	因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。

	你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。

	
=======
4、代码回退
	git status命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，readme.txt被修改过了，但还没有准备提交的修改。

	git diff readme.txt   查看文件修改的地方

	git log 命令显示从最近到最远的提交日志，我们可以看到3次提交

	git log --pretty=onelin  （只看到commit id（版本号））

	git reset --hard HEAD^   回退到上一个版本（关于^ => Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。）

	git reset --hard 1094a  （commt_id 可以又回退到最新的分支）

	Git提供了一个命令git reflog用来记录你的每一次命令。要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


5、工作区和暂存区
	git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。


6、管理修改
	cat readme.txt  查看文件

7、撤销修改
	①工作区修改，没有添加到暂存区
	git checkout --readme.txt(文件名)

	②添加到暂存区，想丢掉就撤销文件
	用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区

	③提交了，没有push到远程
	git reset --hard 1094a(commit_id) 

8、删除文件
	git rm test.txt
	先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的

	注意：命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

9、远程仓库
	Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。

	第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

	$ ssh-keygen -t rsa -C "youremail@example.com"
	你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

	如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

	然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

	为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。

	当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

10、添加远程库
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；（$ git remote add origin git@github.com:michaelliao/learngit.git）

	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

	分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步。

11、从远程库克隆
	GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。

	使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。

	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

12、分支管理
	分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。

13、分支创建与合并、删除
	Git鼓励大量使用分支：

	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>

14、解决冲突
	Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存：

	Creating a new branch is quick and simple.
	再提交：

	$ git add readme.txt 
	$ git commit -m "conflict fixed"

	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

	解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

	用git log --graph命令可以看到分支合并图。
	
15、分支管理策略，删除分支后，丢掉分支信息
	准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
	如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

	$ git merge --no-ff -m "merge with no-ff" dev
	合并后，我们用git log看看分支历史：
	$ git log --graph --pretty=oneline --abbrev-commit

	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

16、Bug分支
	当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交。

	并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？

	幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
	$ git stash   【放到暂存区】

	然后创建分支，在新分支上进行修复bug，修复完再切换回来合并分支。
	工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

	一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

	另一种方式是用git stash pop，恢复的同时把stash内容也删了。

	$ git stash list  可以查看整个stash暂存的内容

17、强行删除一个没有合并的分支
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

18、多人git协作
	多人协作的工作模式通常是这样：

	首先，可以试图用git push origin <branch-name>推送自己的修改；

	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

	如果合并有冲突，则解决冲突，并在本地提交；

	没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

	如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
小结：
	·查看远程库信息，使用git remote -v；

	·本地新建的分支如果不推送到远程，对其他人就是不可见的；

	·从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

	·在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

	·建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

	·从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

	推送本地新建的分支到远端：$ git push origin dev;
	拉取远程分支到本地：git checkout -b origin dev;

19、Rebase操作
	rebase操作可以把本地未push的分叉提交历史整理成直线；
	rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

20、给提交打标签
	命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

	命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
	命令使用：$ git tag v0.9 f52c633

	命令git tag可以查看所有标签。

	$ git show v0.9

	注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。

	查看之前提交过的commit_id:
	$ git log --pretty=oneline --abbrev-commit

21、操作标签
	$ git tag -d v0.1
	因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。

	如果要推送某个标签到远程，使用命令git push origin <tagname>：
	$ git push origin v1.0

	或者，一次性推送全部尚未推送到远程的本地标签：
	$ git push origin --tags

	如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
	$ git tag -d v0.9

	然后，从远程删除。删除命令也是push，但是格式如下：
	$ git push origin :refs/tags/v0.9

小结：
	命令git push origin <tagname>可以推送一个本地标签；
	命令git push origin --tags可以推送全部未推送过的本地标签；
	命令git tag -d <tagname>可以删除一个本地标签；
	命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

22、本地代码库关联远程库
	我们在本地库上使用命令git remote add把它和码云的远程库关联：
	git remote add origin git@gitee.com:liaoxuefeng/learngit.git
	可以正常地用git push和git pull推送了！

	使用多个远程库时，我们要注意，git给远程库起的默认名称是origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。
	然后，先关联GitHub的远程库：
	$ git remote add github git@github.com:michaelliao/learngit.git
	注意，远程库的名称叫github，不叫origin了。

	现在，我们用git remote -v查看远程库信息，可以看到两个远程库：
	$ git remote -v

23、让Git显示颜色
	让Git显示颜色，会让命令输出看起来更醒目：
	$ git config --global color.ui true

24、忽略某类文件提交到git
	小结
	忽略某些文件时，需要编写.gitignore；
	编写规则：
		# Windows:
		Thumbs.db
		ehthumbs.db
		Desktop.ini

		# class:
		*.class

	然后添加，提交。就可以过滤掉.class文件的提交了。
	提示：【$ git add a.class
	The following paths are ignored by one of your .gitignore files:
	a.class
	Use -f if you really want to add them.
	】
	强制提交可以使用：$ git add -f a.class 提交

	.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！

25、给命令配置别名
	我们只需要敲一行命令，告诉Git，以后st就表示status：
	$ git config --global alias.st status

	--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。
	在撤销修改一节中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：
	$ git config --global alias.unstage 'reset HEAD'

	将配置项放到配置文件中：
【	配置文件.gitconfig
	配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。

	配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：

	$ cat .git/config 
	[core]
	    repositoryformatversion = 0
	    filemode = true
	    bare = false
	    logallrefupdates = true
	    ignorecase = true
	    precomposeunicode = true
	[remote "origin"]
	    url = git@github.com:michaelliao/learngit.git
	    fetch = +refs/heads/*:refs/remotes/origin/*
	[branch "master"]
	    remote = origin
	    merge = refs/heads/master
	[alias]
	    last = log -1
	别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

	而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

	$ cat .gitconfig
	[alias]
	    co = checkout
	    ci = commit
	    br = branch
	    st = status
	[user]
	    name = Your Name
	    email = your@email.com
	配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。
】

26、搭建自己的Git服务器
	https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000

	
>>>>>>> dcbebf343ea849f879e42775d0cbe91589872a49
